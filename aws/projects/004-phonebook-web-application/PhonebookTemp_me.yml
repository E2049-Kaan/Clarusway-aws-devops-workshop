AWSTemplateFormatVersion: 2010-09-09
Description: |
  
Parameters:
  Subnets:
    Description: Please select all available subnets
    Type: List<AWS::EC2::Subnet::Id>
  KeyName:
    Description: Please enter your KeyName
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  PhonebookRDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro #required
      DBInstanceIdentifier: phonebookdb
      DBName: phonebook
      DBSecurityGroups:
        - !Ref RDSsg
      Engine: mysql
      EngineVersion: 8.0.20
      MasterUserPassword: clarusway-1
      MasterUsername: admin
      Port: String
      PreferredBackupWindow: String
      PreferredMaintenanceWindow: String
      ProcessorFeatures:
        - ProcessorFeature
      PromotionTier: Integer
      PubliclyAccessible: Boolean
      SourceDBInstanceIdentifier: String
      SourceRegion: String
      StorageEncrypted: Boolean
      StorageType: String
      Tags:
        - Tag
      Timezone: String
      UseDefaultProcessorFeatures: Boolean
      VPCSecurityGroups:
        - String
  
  MyAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref MyInstanceLaunchTemplate
        Version: !GetAtt MyInstanceLaunchTemplate.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref MyALBTargetGroup
  MyInstanceLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: ami-0947d2ba12ee1ff75
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroups:
            - !Ref MyInstanceSecGroup
        TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Name
                  Value: !Sub Web Server of ${AWS::StackName}
        UserData: !Base64 |
          #! /bin/bash
          yum update -y
          yum install python3 -y
          pip3 install flask
          pip3 install flask-mysql
          pip3 install SQLAlchemy
          pip3 install mysql-connector-python
          cd /home/ec2-user
          wget https://raw.githubusercontent.com/E2049-Kaan/Clarusway-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/app.py
          mkdir templates
          cd templates
          wget https://raw.githubusercontent.com/E2049-Kaan/Clarusway-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/templates/index.html
          wget https://raw.githubusercontent.com/E2049-Kaan/Clarusway-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/templates/result.html
          echo "${PhonebookRDSInstance.Endpoint.Address}" >> /home/ec2-user/dbserver.endpoint
          cd ..
          python3 new-init.py
  MyALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups: 
        - !GetAtt  MyLoadBalancerSecGroup.GroupId
      Subnets: !Ref Subnets
  MyALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn: !Ref MyALBTargetGroup
      LoadBalancerArn: !Ref MyALB #required
      Port: 80 #required
      Protocol: HTTP #required
  MyALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP 
      VpcId: !GetAtt MyLoadBalancerSecGroup.VpcId
  MyInstanceSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP from only MyLoadBalancerSecGroup #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt MyLoadBalancerSecGroup.GroupId 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  MyLoadBalancerSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allows HTTP connections from anywhere #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
    
  
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join 
      - ""
      - - 'http://'
        - !GetAtt MyALB.DNSName